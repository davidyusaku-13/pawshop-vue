generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  createdAt DateTime  @default(now()) @map("created_at")
  
  orders    Order[]
  cart      Cart[]
  addresses Address[]
  reviews   Review[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  parentId    String?   @map("parent_id")
  imageUrl    String?   @map("image_url")
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  products    Product[]
  
  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logoUrl     String?   @map("logo_url")
  isActive    Boolean   @default(true) @map("is_active")
  
  products    Product[]
  
  @@map("brands")
}

model Product {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  description       String?
  shortDescription  String?   @map("short_description")
  price             Decimal   @db.Decimal(10,2)
  compareAtPrice    Decimal?  @map("compare_at_price") @db.Decimal(10,2)
  costPrice         Decimal?  @map("cost_price") @db.Decimal(10,2)
  sku               String    @unique
  categoryId        String    @map("category_id")
  brandId           String?   @map("brand_id")
  weight            Decimal?  @db.Decimal(8,3)
  stockQuantity     Int       @default(0) @map("stock_quantity")
  trackInventory    Boolean   @default(true) @map("track_inventory")
  isActive          Boolean   @default(true) @map("is_active")
  metaTitle         String?   @map("meta_title")
  metaDescription   String?   @map("meta_description")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  category          Category  @relation(fields: [categoryId], references: [id])
  brand             Brand?    @relation(fields: [brandId], references: [id])
  images            ProductImage[]
  variants          ProductVariant[]
  cartItems         Cart[]
  orderItems        OrderItem[]
  reviews           Review[]
  
  @@map("products")
}

model ProductImage {
  id          String  @id @default(cuid())
  productId   String  @map("product_id")
  url         String
  altText     String? @map("alt_text")
  sortOrder   Int     @default(0) @map("sort_order")
  isPrimary   Boolean @default(false) @map("is_primary")
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductVariant {
  id            String  @id @default(cuid())
  productId     String  @map("product_id")
  name          String
  sku           String  @unique
  price         Decimal @db.Decimal(10,2)
  stockQuantity Int     @default(0) @map("stock_quantity")
  option1       String?
  option2       String?
  option3       String?
  
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems     Cart[]
  orderItems    OrderItem[]
  
  @@map("product_variants")
}

model Cart {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  productId   String    @map("product_id")
  variantId   String?   @map("variant_id")
  quantity    Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId, variantId])
  @@map("cart")
}

model Order {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  orderNumber     String    @unique @map("order_number")
  status          String    @default("pending")
  subtotal        Decimal   @db.Decimal(10,2)
  taxAmount       Decimal   @default(0) @map("tax_amount") @db.Decimal(10,2)
  shippingAmount  Decimal   @default(0) @map("shipping_amount") @db.Decimal(10,2)
  totalAmount     Decimal   @map("total_amount") @db.Decimal(10,2)
  shippingAddress Json?     @map("shipping_address")
  billingAddress  Json?     @map("billing_address")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  user            User      @relation(fields: [userId], references: [id])
  items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String  @map("order_id")
  productId   String  @map("product_id")
  variantId   String? @map("variant_id")
  quantity    Int
  price       Decimal @db.Decimal(10,2)
  total       Decimal @db.Decimal(10,2)
  
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@map("order_items")
}

model Address {
  id            String  @id @default(cuid())
  userId        String  @map("user_id")
  type          String
  firstName     String  @map("first_name")
  lastName      String  @map("last_name")
  company       String?
  addressLine1  String  @map("address_line_1")
  addressLine2  String? @map("address_line_2")
  city          String
  state         String
  postalCode    String  @map("postal_code")
  country       String
  phone         String?
  
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

model Review {
  id                  String    @id @default(cuid())
  productId           String    @map("product_id")
  userId              String    @map("user_id")
  rating              Int
  title               String?
  content             String?
  isVerifiedPurchase  Boolean   @default(false) @map("is_verified_purchase")
  createdAt           DateTime  @default(now()) @map("created_at")
  
  product             Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([productId, userId])
  @@map("reviews")
}
